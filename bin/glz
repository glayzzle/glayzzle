#!/usr/bin/env node

/*!
 * Copyright (C) 2017 Glayzzle (BSD3 License)
 * @url http://glayzzle.com
 * @author Ioan CHIRIAC
 */
var fs = require('fs');
var phpRuntime = require('php-runtime');
var version = require('../package.json').version;
function printVersion() {
  console.log('Glayzzle '+version+' (cli) - (c) 2017 Ioan Chiriac');
  console.log('Distributed under BSD License - http://glayzzle.com');
}

function printHelp() {
  console.log('Usage: glz [options] [-f] <file>');
  console.log('');
  console.log('  -r <code>        Run PHP <code> without using script tags <?..?>');
  console.log('  -f <file>        Parse and execute file');
  console.log('  -S <addr>:<port> Run with built-in web server.')
  console.log('  -v, --version    Print version information and exit');
  console.log('  -h, --help       Print help and exit');
}

// aborts the execution with the specified error message
function abort(message) {
  console.error(message);
  process.exit(1);
}

/* Arguments */
var options = {
  eval: null,
  filename: null,
  server: false,
  debug: false
};
var args = process.argv.slice(2); // Trim 'node' and the script path.

function isOption(arg) {
  return (/^-/).test(arg);
}

function nextArg() {
  args.shift();
}

// Reading arguments
while (args.length > 0 && isOption(args[0])) {
  switch(args[0]) {
    case '-f':
      nextArg();
      options.filename = args[0];
      break;

    case '-r':
      nextArg();
      options.eval = args[0];
      break;

    case '-S':
      nextArg();
      options.server = args[0];
      break;

    case '--debug':
      nextArg();
      options.debug = true;
      break;

    case '-h':
    case '--help':
      printHelp();
      process.exit(0);
      break;

    case '-v':
    case '--version':
      printVersion();
      process.exit(0);
      break;

    default:
      abort('Unknown option: ' + args[0] + '. Use --help for available commands.');
  }
  nextArg();
}

// Checking last parameters
if ( args.length > 0 ) {
  if ( args.length == 1 && !options.filename ) {
    options.filename = args[0];
  } else {
    abort('Too many arguments.');
  }
}

if ( !options.filename && !options.eval ) {
  abort('Expecting a filename or an input code. Use --help for available commands.');
}

// initialize environement
var $php = new phpRuntime({
  core: {
    config: {
      extension: ['php-core']
    }
  }
});

// runs the command
if (options.server) {
  var http = require('http');
  var cluster = require('cluster');
  if (cluster.isMaster) {
    printVersion();
    console.log('Started at ' + (new Date()));
    console.log('Listening at ' + options.server);
  }
  if ( process.env.DEBUG == 0 && cluster.isMaster) {
    var numCPUs = require('os').cpus().length;
    // Fork workers.
    for (var i = 0; i < numCPUs; i++) {
      cluster.fork();
    }
    console.log('Started ' + numCPUs + ' workers...\n');
    cluster.on('exit', function(worker, code, signal) {
      console.log('worker ' + worker.process.pid + ' died');
      cluster.fork();
    });
  } else {
    var endpoint = options.server.split(':');
    http.createServer(function(req, res) {
      if (options.debug) {
        var now = new Date();
        console.log(now.getHours()+':'+now.getMinutes()+':'+now.getSeconds() + '\t' + req.method + ' ' + req.url);
      }
      try {
        $php.reset();
        // INJECT GLOBALS
        var rqTime = (new Date()).getTime() / 1000;
        var remote = req.socket.address();
        var queryString = req.url.indexOf('?');
        if (queryString === -1) {
          queryString = null;
        } else {
          queryString = message.url.substring(queryString + 1);
        }
        $php.context.globals._SERVER = $php.array({
          'GATEWAY_INTERFACE': 'CLI',
          'SERVER_ADDR': endpoint[0],
          'SERVER_NAME': endpoint[0],
          'SERVER_SOFTWARE': 'GLZ/0.1',
          'SERVER_PROTOCOL': req.httpVersion,
          'REQUEST_METHOD': req.method,
          'REQUEST_TIME': Math.round(rqTime),
          'REQUEST_TIME_FLOAT': rqTime,
          'QUERY_STRING': queryString,
          'DOCUMENT_ROOT': process.cwd(),
          'HTTPS': false,
          'REMOTE_ADDR': remote.address,
          'REMOTE_HOST': remote.address,
          'REMOTE_PORT': remote.port,
          // REMOTE_USER
          // REDIRECT_REMOTE_USER
          'SCRIPT_FILENAME': options.filename,
          'SERVER_PORT': endpoint[1],
          // SERVER_SIGNATURE
          // PATH_TRANSLATED
          'SCRIPT_NAME': options.filename,
          'REQUEST_URI': req.url,
          // PHP_AUTH_DIGEST
          // PHP_AUTH_USER
          // PHP_AUTH_PW
          // AUTH_TYPE
          // PATH_INFO
          // ORIG_PATH_INFO
        });
        // IMPORT HTTP HEADERS
        for(var k in req.headers) {
          $php.context.globals._SERVER.set(
            'HTTP_' + k.toUpperCase().replace(/-/g, '_'),
            req.headers[k]
          );
        }
        // BIND OUTPUT
        $php.stdout._cb = res.write.bind(res);
        // RUN BOOTSTRAP
        $php.require(options.filename);
        res.end();
      } catch(e) {
        console.error(e);
        res.end('Error : ' + e.message);
      }
    }).listen(parseInt(endpoint[1]), endpoint[0]);
  }
} else if(options.filename) {
  // runs the specified script
  $php.require(options.filename);
} else if(options.eval) {
  // evaluate the eval arg
  $php.eval(options.eval);
}
